'use client';

import { useState, useRef, useEffect } from 'react';
import { CgSpinner } from 'react-icons/cg';
import { PiPaperPlaneRightFill } from 'react-icons/pi';

type Message = {
  role: 'system' | 'user' | 'assistant';
  content: string;
};

const SYSTEM_PROMPT: Message = {
  role: 'system',
  content: 'You are a helpful assistant. ' +
    "After generating an image, reply only with 'Done'."
};

const MAX_LENGTH = Number(process.env.NEXT_PUBLIC_MAX_INPUT_LENGTH) || 4000;

export default function Home() {
  const [userInput, setUserInput] = useState<string>('');
  const [messages, setMessages] = useState<Message[]>([SYSTEM_PROMPT]);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [responseId, setResponseId] = useState<string | null>(null);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const isMobile: boolean = typeof navigator !== 'undefined' &&
    /Mobi|Android|iPhone|iPad|iPod/i.test(navigator.userAgent);

  const handleSendMessage = async (): Promise<void> => {
    if (!userInput.trim()) return;

    const userMessage: Message = {
      role: 'user',
      content: userInput.trim().slice(0, MAX_LENGTH)
    };

    const updatedMessages: Message[] = [...messages, userMessage];
    let answer: string = '';

    setIsLoading(true);
    setUserInput('');
    setMessages(updatedMessages);

    try {
      const res = await fetch('/api/openai/responses', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          input: responseId !== null ? userMessage.content : updatedMessages,
          lastResponseId: responseId
        })
      });

      const data = await res.json();

      if (data.output) {
        setResponseId(data.output.id);
        answer = data.output.text;
      } else {
        answer = `Error: ${data.error ?? 'An unexpected error has occurred.'}`;
      }
    } catch (error) {
      console.error('Error fetching response: ', error);
      answer = 'Error: Failed to get a response. Please try again later.';
    } finally {
      setMessages((prev) => [...prev, { role: 'assistant', content: answer }]);
      setIsLoading(false);
    }
  };

  // Scroll to bottom on new message
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  return (
    <main className='flex flex-col h-screen bg-gray-900 text-white'>
      <div className='flex-1 overflow-y-auto pt-4 px-4'>
        {messages
          .filter((message) => message.role !== 'system')
          .map((msg, index) => (
            <div
              key={index}
              className={`mb-4 flex ${msg.role === 'user'
                ? 'justify-end'
                : 'justify-start'
                }`}
            >
              <div
                className={`rounded-lg px-4 py-2 max-w-xl ${msg.role === 'user'
                  ? 'bg-blue-600 text-white'
                  : 'bg-gray-700 text-gray-100'
                  }`}
              >
                {msg.content.startsWith('data:image') ? (
                  <img
                    src={msg.content}
                    alt='Image generated by the AI'
                    className='max-w-full max-h-[50vh] rounded-lg'
                  />
                ) : (
                  <div className='whitespace-pre-wrap wrap-anywhere'>
                    {msg.content.trim()}
                  </div>
                )}
              </div>
            </div>
          ))}

        <div ref={messagesEndRef} />
      </div>

      <div className='p-4 bg-gray-800 flex'>
        <textarea
          rows={3}
          maxLength={MAX_LENGTH}
          className='flex-1 rounded-l-lg px-4 py-2 bg-gray-700 text-white
            focus:outline-none resize-none'
          placeholder='Ask the AI...'
          value={userInput}
          onChange={(e) => setUserInput(e.target.value)}
          onKeyDown={(e) => {
            if (e.key === 'Enter' && !e.shiftKey && !isMobile && !isLoading) {
              e.preventDefault();
              handleSendMessage();
            }
          }}
          disabled={isLoading}
        />

        <button
          className='rounded-r-lg px-5 py-2 bg-green-600 hover:bg-green-700
            disabled:opacity-50 hover:cursor-pointer'
          onClick={handleSendMessage}
          disabled={isLoading || !userInput.trim()}
        >
          {isLoading
            ? <CgSpinner className='animate-spin' />
            : <PiPaperPlaneRightFill />}
        </button>
      </div>
    </main>
  );
}